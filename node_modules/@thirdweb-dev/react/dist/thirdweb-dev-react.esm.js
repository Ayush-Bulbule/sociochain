import { LocalWallet, walletIds, SmartWallet } from '@thirdweb-dev/wallets';
import { r as radius, s as spacing, f as fontSize, i as iconSize, S as Spacer, B as BackButton, I as Img, M as ModalTitle, a as ModalDescription, F as FormFooter, b as Button, c as Flex, d as Spinner, L as Label, E as ErrorMessage$1, H as HelperLink } from './basic-28294d81.esm.js';
import { i as isMobile, F as FormFieldWithIconButton, u as useIsHeadlessWallet, W as WalletSelection, d as defaultWallets, H as HeadlessConnectUI } from './headlessConnectUI-d733b1be.esm.js';
export { c as coinbaseWallet, m as metamaskWallet, w as walletConnectV1 } from './headlessConnectUI-d733b1be.esm.js';
import { UploadIcon, EyeClosedIcon, EyeOpenIcon, ExclamationTriangleIcon } from '@radix-ui/react-icons';
import { useCreateWalletInstance, useThirdwebWallet, useWallet, useConnect, useActiveChain, useNetworkMismatch, useConnectionStatus } from '@thirdweb-dev/react-core';
export * from '@thirdweb-dev/react-core';
import { useState, useEffect, useCallback, useRef } from 'react';
import styled from '@emotion/styled';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { S as SecondaryText, E as ExportLocalWallet, s as shortenAddress } from './useWalletConnect-523d4906.esm.js';
export { C as ConnectWallet, M as MediaRenderer, N as NetworkSelector, h as ThirdwebNftMedia, T as ThirdwebProvider, W as Web3Button, b as useCoinbaseWallet, u as useInstalledWallets, a as useMetamask, d as usePaperWallet, c as usePaperWalletUserEmail, g as useResolvedMediaType, e as useWalletConnect, f as useWalletConnectV1 } from './useWalletConnect-523d4906.esm.js';
export { paperWallet } from './paperWallet-ecd686e8.esm.js';
export { safeWallet } from './safeWallet-ee430f3b.esm.js';
export { walletConnect } from './walletConnect-6266b8c5.esm.js';
export { magicLink } from './magicLink-e4c6ec3f.esm.js';
export { u as useSafe } from './useSafe-c1f58c5e.esm.js';
export { u as useMagic } from './useMagic-42c7f5d1.esm.js';
import '@emotion/react';
import '@radix-ui/react-dialog';
import '@radix-ui/colors';
import 'detect-browser';
import 'react-qr-code';
import '@tanstack/react-query';
import '@radix-ui/react-popover';
import 'copy-to-clipboard';
import '@radix-ui/react-tooltip';
import 'ethers';
import '@radix-ui/react-tabs';
import 'fuse.js';
import '@radix-ui/react-dropdown-menu';
import '@thirdweb-dev/chains';
import 'tiny-invariant';

function useLocalWalletInfo(localConfiguredWallet) {
  const [walletData, setWalletData] = useState("loading");
  const createWalletInstance = useCreateWalletInstance();
  const [localWallet, setLocalWallet] = useState(null);
  useEffect(() => {
    const wallet = createWalletInstance(localConfiguredWallet);
    setLocalWallet(wallet);
    if (localConfiguredWallet.config.persist) {
      wallet.getSavedData().then(data => {
        setWalletData(data);
      });
    }
  }, [createWalletInstance, localConfiguredWallet]);
  return {
    setLocalWallet,
    localWallet,
    walletData,
    meta: localConfiguredWallet.meta,
    persist: localConfiguredWallet.config.persist
  };
}

const DragNDrop = props => {
  const [error, setError] = useState(false);
  const [uploaded, setUploaded] = useState();
  const [isDragging, setIsDragging] = useState(false);
  const dragIn = e => {
    setError(false);
    setUploaded(undefined);
    setIsDragging(true);
    e.preventDefault();
    e.stopPropagation();
  };
  const dragOut = e => {
    setIsDragging(false);
    e.preventDefault();
    e.stopPropagation();
  };
  const handleFileUpload = file => {
    if (file.type !== props.accept) {
      setError(true);
    } else {
      setUploaded(file);
      props.onUpload(file);
    }
  };
  const drop = e => {
    setIsDragging(false);
    e.preventDefault();
    e.stopPropagation();
    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      handleFileUpload(e.dataTransfer.files[0]);
      e.dataTransfer.clearData();
    }
  };
  const message = isMobile() ? "Click to Upload" : "Drop your file here or click to upload";
  return /*#__PURE__*/jsx("div", {
    onDragEnter: dragIn,
    onDragLeave: dragOut,
    onDragOver: e => {
      setIsDragging(true);
      e.preventDefault();
      e.stopPropagation();
    },
    onClick: () => {
      setError(false);
    },
    onDrop: drop,
    style: {
      cursor: "pointer"
    },
    children: /*#__PURE__*/jsxs("label", {
      htmlFor: "file-upload",
      children: [/*#__PURE__*/jsx("input", {
        id: "file-upload",
        type: "file",
        accept: props.accept,
        multiple: false,
        style: {
          display: "none"
        },
        onChange: e => {
          if (e.target.files && e.target.files.length > 0) {
            handleFileUpload(e.target.files[0]);
          }
        }
      }), /*#__PURE__*/jsx(DropContainer, {
        "data-error": error,
        "data-is-dragging": isDragging,
        children: !uploaded ? /*#__PURE__*/jsxs(Fragment, {
          children: [" ", /*#__PURE__*/jsx(UploadIconSecondary, {
            width: iconSize.xl,
            height: iconSize.xl
          }), /*#__PURE__*/jsx(Spacer, {
            y: "md"
          }), /*#__PURE__*/jsx(Message, {
            children: message
          }), /*#__PURE__*/jsx(Spacer, {
            y: "md"
          }), error ? /*#__PURE__*/jsxs(ErrorMessage, {
            children: [" ", "Please upload a ", props.extension, " file", " "]
          }) : /*#__PURE__*/jsxs(ExtensionText, {
            children: [" ", props.extension, " "]
          })]
        }) : /*#__PURE__*/jsxs(Fragment, {
          children: [/*#__PURE__*/jsxs(Message, {
            children: [uploaded.name, " uploaded successfully"]
          }), /*#__PURE__*/jsx(Spacer, {
            y: "md"
          }), /*#__PURE__*/jsx(CheckCircleIcon, {
            size: iconSize.xl
          })]
        })
      })]
    })
  });
};
const UploadIconSecondary = styled(UploadIcon)`
  color: ${props => props.theme.text.secondary};
  transition: transform 200ms ease, color 200ms ease;
`;
const DropContainer = styled.div`
  border: 2px solid ${p => p.theme.bg.elevated};
  border-radius: ${radius.md};
  padding: ${spacing.xl} ${spacing.md};
  display: flex;
  align-items: center;
  flex-direction: column;
  cursor: pointer;
  transition: border-color 200ms ease;

  &:hover,
  &[data-is-dragging="true"] {
    border-color: ${p => p.theme.link.primary};
    svg {
      color: ${p => p.theme.link.primary};
    }
  }

  &[data-error="true"] {
    border-color: ${p => p.theme.input.errorRing};
  }
`;
const ErrorMessage = styled.p`
  color: ${p => p.theme.input.errorRing};
  font-size: ${fontSize.sm};
  margin: 0;
`;
const ExtensionText = styled.span`
  color: ${p => p.theme.text.secondary};
  font-size: ${fontSize.sm};
`;
const CheckCircleIcon = props => /*#__PURE__*/jsxs("svg", {
  width: props.size,
  height: props.size,
  viewBox: "0 0 38 38",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  children: [/*#__PURE__*/jsx("path", {
    d: "M35.6666 17.4671V19.0004C35.6645 22.5945 34.5008 26.0916 32.3488 28.9701C30.1969 31.8487 27.1721 33.9546 23.7255 34.9736C20.279 35.9926 16.5954 35.8703 13.224 34.6247C9.85272 33.3792 6.97434 31.0773 5.01819 28.0622C3.06203 25.0472 2.1329 21.4805 2.36938 17.8943C2.60586 14.308 3.99526 10.8943 6.33039 8.16221C8.66551 5.43012 11.8212 3.52606 15.3269 2.734C18.8326 1.94194 22.5004 2.30432 25.7833 3.76709",
    stroke: "#5BD58C",
    strokeWidth: "3.33333",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/jsx("path", {
    d: "M35.6667 5.66699L19 22.3503L14 17.3503",
    stroke: "#5BD58C",
    strokeWidth: "3.33333",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  })]
});
const Message = styled.p`
  color: ${p => p.theme.text.neutral};
  font-size: ${fontSize.md};
  margin: 0;
  font-weight: 600;
`;

const LocalWalletModalHeader = props => {
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(Img, {
      src: props.meta.iconURL,
      width: iconSize.xl,
      height: iconSize.xl
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    })]
  });
};

const ImportLocalWallet = props => {
  const [jsonString, setJsonString] = useState();
  const {
    setLocalWallet,
    meta
  } = useLocalWalletInfo(props.localWallet);
  const createWalletInstance = useCreateWalletInstance();
  const [password, setPassword] = useState("");
  const [isWrongPassword, setIsWrongPassword] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [importedAddress, setImportedAddress] = useState();
  const thirdwebWalletContext = useThirdwebWallet();
  const handleImport = async () => {
    const localWallet = createWalletInstance(props.localWallet);
    if (!localWallet || !jsonString) {
      throw new Error("Invalid state");
    }
    try {
      await localWallet.import({
        encryptedJson: jsonString,
        password
      });
    } catch (e) {
      console.error(e);
      setIsWrongPassword(true);
      return;
    }
    await localWallet.save({
      strategy: "encryptedJson",
      password
    });
    thirdwebWalletContext.handleWalletConnect(localWallet);
    setLocalWallet(localWallet);
    props.onConnect();
  };
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(LocalWalletModalHeader, {
      onBack: props.goBack,
      meta: meta
    }), /*#__PURE__*/jsx(ModalTitle, {
      style: {
        textAlign: "left"
      },
      children: "Import Wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(ModalDescription, {
      children: "The application can authorize any transactions on behalf of the wallet without any approvals. We recommend only connecting to trusted applications."
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(DragNDrop, {
      extension: "JSON",
      accept: "application/json",
      onUpload: file => {
        const reader = new FileReader();
        reader.onload = event => {
          setJsonString(event.target?.result);
          const obj = JSON.parse(event.target?.result);
          setImportedAddress(obj.address);
        };
        reader.readAsText(file, "utf-8");
      }
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleImport();
      },
      children: [jsonString && /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx("input", {
          type: "text",
          name: "username",
          autoComplete: "off",
          value: importedAddress || "",
          disabled: true,
          style: {
            display: "none"
          }
        }), /*#__PURE__*/jsx(FormFieldWithIconButton, {
          required: true,
          noSave: true,
          name: "password",
          autocomplete: "off",
          id: "password",
          onChange: value => {
            setPassword(value);
            setIsWrongPassword(false);
          },
          right: {
            onClick: () => setShowPassword(!showPassword),
            icon: showPassword ? /*#__PURE__*/jsx(EyeClosedIcon, {}) : /*#__PURE__*/jsx(EyeOpenIcon, {})
          },
          label: "Password",
          type: showPassword ? "text" : "password",
          value: password,
          error: isWrongPassword ? "Wrong Password" : ""
        }), /*#__PURE__*/jsx(Spacer, {
          y: "xl"
        })]
      }), /*#__PURE__*/jsx(FormFooter, {
        children: /*#__PURE__*/jsx(Button, {
          variant: "inverted",
          type: "submit",
          disabled: !jsonString,
          style: {
            minWidth: "110px",
            opacity: jsonString ? 1 : 0.5
          },
          children: "Import"
        })
      })]
    })]
  });
};

const TextDivider = styled.div`
  display: flex;
  align-items: center;
  color: ${p => p.theme.text.secondary};
  font-size: ${fontSize.sm};
  &::before,
  &::after {
    content: "";
    flex: 1;
    border-bottom: 1px solid ${p => p.theme.bg.highlighted};
  }

  span {
    margin: 0 1rem;
  }
`;

const CreateLocalWallet_Password = props => {
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const passwordMismatch = confirmPassword && password !== confirmPassword;
  const [isConnecting, setIsConnecting] = useState(false);
  const {
    localWallet,
    meta
  } = useLocalWalletInfo(props.localWallet);
  const thirdwebWalletContext = useThirdwebWallet();
  const [showImportScreen, setShowImportScreen] = useState(false);
  const [generatedAddress, setGeneratedAddress] = useState(null);

  // generating wallet before it's required to render a form with hidden address as username for better autofill
  useEffect(() => {
    if (!localWallet || showImportScreen || localWallet.ethersWallet) {
      return;
    }
    localWallet.generate().then(_address => {
      setGeneratedAddress(_address);
    });
  }, [localWallet, showImportScreen]);
  if (showImportScreen) {
    return /*#__PURE__*/jsx(ImportLocalWallet, {
      localWallet: props.localWallet,
      onConnect: props.onConnect,
      goBack: () => {
        setShowImportScreen(false);
      }
    });
  }
  const handleConnect = async () => {
    if (passwordMismatch || !localWallet) {
      throw new Error("Invalid state");
    }
    setIsConnecting(true);
    localWallet.connect();
    await localWallet.save({
      strategy: "encryptedJson",
      password
    });
    thirdwebWalletContext.handleWalletConnect(localWallet);
    setIsConnecting(false);
    props.onConnect();
  };
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(LocalWalletModalHeader, {
      onBack: props.goBack,
      meta: meta
    }), /*#__PURE__*/jsx(Flex, {
      alignItems: "center",
      gap: "xs",
      children: /*#__PURE__*/jsx(ModalTitle, {
        children: "Guest Wallet"
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxs(ModalDescription, {
      children: ["Choose a password for your wallet, you", `'`, "ll be able to access and export this wallet with the same password."]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleConnect();
      },
      children: [/*#__PURE__*/jsx("input", {
        type: "text",
        name: "username",
        autoComplete: "off",
        value: generatedAddress || "",
        disabled: true,
        style: {
          display: "none"
        }
      }), /*#__PURE__*/jsx(FormFieldWithIconButton, {
        name: "password",
        required: true,
        autocomplete: "new-password",
        id: "new-password",
        onChange: value => setPassword(value),
        right: {
          icon: showPassword ? /*#__PURE__*/jsx(EyeClosedIcon, {}) : /*#__PURE__*/jsx(EyeOpenIcon, {}),
          onClick: () => setShowPassword(!showPassword)
        },
        label: "Password",
        type: showPassword ? "text" : "password",
        value: password
      }), /*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsx(FormFieldWithIconButton, {
        name: "confirm-password",
        required: true,
        autocomplete: "new-password",
        id: "confirm-password",
        onChange: value => setConfirmPassword(value),
        right: {
          icon: showPassword ? /*#__PURE__*/jsx(EyeClosedIcon, {}) : /*#__PURE__*/jsx(EyeOpenIcon, {}),
          onClick: () => setShowPassword(!showPassword)
        },
        label: "Confirm Password",
        type: showPassword ? "text" : "password",
        value: confirmPassword,
        error: passwordMismatch ? "Passwords don't match" : ""
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(Button, {
        variant: "inverted",
        type: "submit",
        style: {
          width: "100%",
          gap: spacing.sm
        },
        children: [isConnecting ? "Connecting" : "Create new wallet", isConnecting && /*#__PURE__*/jsx(Spinner, {
          size: "sm",
          color: "inverted"
        })]
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xxl"
    }), /*#__PURE__*/jsx(TextDivider, {
      children: /*#__PURE__*/jsx("span", {
        children: "OR"
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(Flex, {
      justifyContent: "center",
      children: /*#__PURE__*/jsx(Button, {
        variant: "link",
        onClick: () => {
          setShowImportScreen(true);
        },
        children: "Import wallet"
      })
    })]
  });
};
const CreateLocalWallet_Guest = props => {
  const {
    localWallet
  } = useLocalWalletInfo(props.localWallet);
  const thirdwebWalletContext = useThirdwebWallet();
  const handleConnect = useCallback(async () => {
    if (!localWallet) {
      throw new Error("Invalid state");
    }
    await localWallet.generate();
    await localWallet.connect();
    thirdwebWalletContext.handleWalletConnect(localWallet);
    props.onConnect();
  }, [localWallet, thirdwebWalletContext, props]);
  const connecting = useRef(false);
  useEffect(() => {
    if (connecting.current || !localWallet) {
      return;
    }
    connecting.current = true;
    handleConnect();
  }, [handleConnect, localWallet]);
  return /*#__PURE__*/jsx(Flex, {
    justifyContent: "center",
    alignItems: "center",
    style: {
      height: "300px"
    },
    children: /*#__PURE__*/jsx(Spinner, {
      size: "lg",
      color: "link"
    })
  });
};

const OverrideConfirmation = props => {
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(LocalWalletModalHeader, {
      onBack: props.onBack,
      meta: props.meta
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: "Backup your wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxs("div", {
      style: {
        lineHeight: 1.5
      },
      children: [/*#__PURE__*/jsx(SecondaryText, {
        children: "Your current wallet will be deleted if you create a new wallet. Backup wallet to your device before creating a new wallet"
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(FormFooter, {
        children: [/*#__PURE__*/jsx(Button, {
          variant: "inverted",
          onClick: props.onBackup,
          children: "Backup wallet"
        }), /*#__PURE__*/jsx(Button, {
          variant: "danger",
          onClick: props.onSkip,
          children: "Skip"
        })]
      })]
    })]
  });
};

/**
 * For No-Credential scenario
 */
const ReconnectLocalWallet = props => {
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [isWrongPassword, setIsWrongPassword] = useState(false);
  const thirdwebWalletContext = useThirdwebWallet();
  const [isConnecting, setIsConnecting] = useState(false);
  const [showCreate, setShowCreate] = useState(false);
  const [showBackupConfirmation, setShowBackupConfirmation] = useState(false);
  const [showExport, setShowExport] = useState(false);
  const {
    localWallet,
    meta,
    walletData
  } = useLocalWalletInfo(props.localWallet);
  const savedAddress = walletData ? walletData === "loading" ? "" : walletData.address : "";
  if (showExport) {
    if (!localWallet) {
      throw new Error("Invalid state");
    }
    return /*#__PURE__*/jsx(ExportLocalWallet, {
      localWallet: localWallet,
      onBack: () => {
        setShowExport(false);
      },
      onExport: () => {
        setShowExport(false);
        setShowBackupConfirmation(false);
        setShowCreate(true);
      }
    });
  }
  if (showBackupConfirmation) {
    return /*#__PURE__*/jsx(OverrideConfirmation, {
      meta: meta,
      onBackup: () => {
        setShowExport(true);
      },
      onSkip: () => {
        setShowBackupConfirmation(false);
        setShowCreate(true);
      },
      onBack: () => {
        setShowBackupConfirmation(false);
      }
    });
  }
  if (showCreate) {
    return /*#__PURE__*/jsx(CreateLocalWallet_Password, {
      localWallet: props.localWallet,
      goBack: () => {
        setShowCreate(false);
      },
      onConnect: props.onConnect
    });
  }
  const handleReconnect = async () => {
    if (!localWallet) {
      throw new Error("Invalid state");
    }
    setIsConnecting(true);
    try {
      await localWallet.load({
        strategy: "encryptedJson",
        password
      });
      await localWallet.connect();
      thirdwebWalletContext.handleWalletConnect(localWallet);
      props.onConnect();
    } catch (e) {
      setIsWrongPassword(true);
    }
    setIsConnecting(false);
  };
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(LocalWalletModalHeader, {
      onBack: props.goBack,
      meta: meta
    }), /*#__PURE__*/jsx(ModalTitle, {
      style: {
        textAlign: "left"
      },
      children: "Guest Wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xs"
    }), /*#__PURE__*/jsx(ModalDescription, {
      children: "Connect to saved wallet on your device"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(Label, {
      children: "Saved Wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsx(SecondaryText, {
      children: savedAddress === "" ? "Loading..." : shortenAddress(savedAddress)
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleReconnect();
      },
      children: [/*#__PURE__*/jsx("input", {
        type: "text",
        name: "username",
        autoComplete: "off",
        value: savedAddress,
        disabled: true,
        style: {
          display: "none"
        }
      }), /*#__PURE__*/jsx(FormFieldWithIconButton, {
        required: true,
        name: "current-password",
        autocomplete: "current-password",
        id: "current-password",
        onChange: value => {
          setPassword(value);
          setIsWrongPassword(false);
        },
        right: {
          onClick: () => setShowPassword(!showPassword),
          icon: showPassword ? /*#__PURE__*/jsx(EyeClosedIcon, {}) : /*#__PURE__*/jsx(EyeOpenIcon, {})
        },
        label: "Password",
        type: showPassword ? "text" : "password",
        value: password,
        error: isWrongPassword ? "Wrong Password" : ""
      }), /*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsx(FormFooter, {
        children: /*#__PURE__*/jsxs(Button, {
          variant: "inverted",
          type: "submit",
          style: {
            display: "flex",
            gap: spacing.sm
          },
          children: ["Connect", isConnecting && /*#__PURE__*/jsx(Spinner, {
            size: "sm",
            color: "inverted"
          })]
        })
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xxl"
    }), /*#__PURE__*/jsx(Button, {
      variant: "link",
      style: {
        textAlign: "center",
        width: "100%",
        padding: "2px"
      },
      onClick: () => {
        setShowBackupConfirmation(true);
      },
      children: "Create a new wallet"
    })]
  });
};

const LocalWalletConnectUI = props => {
  const {
    walletData
  } = useLocalWalletInfo(props.localWallet);
  if (!props.localWallet.config.persist) {
    return /*#__PURE__*/jsx(CreateLocalWallet_Guest, {
      localWallet: props.localWallet,
      goBack: props.goBack,
      onConnect: props.close
    });
  }
  if (walletData === "loading") {
    return /*#__PURE__*/jsx(Flex, {
      justifyContent: "center",
      alignItems: "center",
      style: {
        height: "300px"
      },
      children: /*#__PURE__*/jsx(Spinner, {
        size: "lg",
        color: "primary"
      })
    });
  }
  if (walletData) {
    return /*#__PURE__*/jsx(ReconnectLocalWallet, {
      onConnect: props.close,
      goBack: props.goBack,
      localWallet: props.localWallet
    });
  }
  return /*#__PURE__*/jsx(CreateLocalWallet_Password, {
    goBack: props.goBack,
    localWallet: props.localWallet,
    onConnect: props.close
  });
};

const localWallet = config => {
  const configuredWallet = {
    id: LocalWallet.id,
    meta: {
      ...LocalWallet.meta,
      name: "Guest Wallet"
    },
    create: options => new LocalWallet(options),
    config: {
      persist: config && config.persist !== undefined ? config.persist : true
    },
    connectUI(props) {
      return /*#__PURE__*/jsx(LocalWalletConnectUI, {
        ...props,
        localWallet: configuredWallet
      });
    },
    isInstalled() {
      // TODO
      return false;
    }
  };
  return configuredWallet;
};

const SmartWalletConnecting = props => {
  const activeWallet = useWallet(); // personal wallet

  const connect = useConnect();
  const connectedChain = useActiveChain();
  const targetChain = useThirdwebWallet().activeChain;
  const mismatch = useNetworkMismatch();
  const [connectError, setConnectError] = useState(false);
  const [switchError, setSwitchError] = useState(false);
  const [switchingNetwork, setSwitchingNetwork] = useState(false);
  const connectionStatus = useConnectionStatus();
  const requiresConfirmation = !useIsHeadlessWallet();
  const {
    onConnect
  } = props;
  const handleConnect = useCallback(async () => {
    if (!activeWallet || !connectedChain) {
      return;
    }
    setConnectError(false);
    try {
      await connect(props.smartWallet, {
        personalWallet: activeWallet
      });
      onConnect();
    } catch (e) {
      console.error(e);
      setConnectError(true);
    }
  }, [activeWallet, connectedChain, connect, props.smartWallet, onConnect]);
  useEffect(() => {
    if (!mismatch) {
      handleConnect();
    }
  }, [mismatch, handleConnect, activeWallet, connectedChain]);
  if (connectionStatus === "connecting" || !mismatch) {
    return /*#__PURE__*/jsx(Flex, {
      style: {
        height: "300px",
        justifyContent: "center",
        alignItems: "center"
      },
      children: /*#__PURE__*/jsx(Spinner, {
        color: "link",
        size: "lg"
      })
    });
  }
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(Img, {
      src: props.smartWallet.meta.iconURL,
      width: iconSize.xl,
      height: iconSize.xl
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: "Network Mismatch"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(ModalDescription, {
      children: "Selected wallet is not connected to the required network"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), connectError && /*#__PURE__*/jsxs(ErrorMessage$1, {
      style: {
        display: "flex",
        gap: spacing.sm,
        alignItems: "center",
        fontSize: fontSize.sm
      },
      children: [/*#__PURE__*/jsx(ExclamationTriangleIcon, {
        width: iconSize.sm,
        height: iconSize.sm
      }), /*#__PURE__*/jsxs("span", {
        children: ["Could not connect to Smart Wallet. ", /*#__PURE__*/jsx("br", {})]
      })]
    }), /*#__PURE__*/jsxs(Button, {
      type: "button",
      variant: "secondary",
      style: {
        display: "flex",
        alignItems: "center",
        gap: spacing.sm
      },
      onClick: async () => {
        if (!activeWallet) {
          throw new Error("No active wallet");
        }
        setConnectError(false);
        setSwitchError(false);
        setSwitchingNetwork(true);
        try {
          await activeWallet.switchChain(targetChain.chainId);
        } catch (e) {
          setSwitchError(true);
        } finally {
          setSwitchingNetwork(false);
        }
      },
      children: [" ", switchingNetwork ? "Switching" : "Switch Network", switchingNetwork && /*#__PURE__*/jsx(Spinner, {
        size: "sm",
        color: "primary"
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), switchingNetwork && requiresConfirmation && /*#__PURE__*/jsx(ConfirmMessage, {
      children: " Confirm in your wallet "
    }), switchError && /*#__PURE__*/jsxs(ErrorMessage$1, {
      style: {
        display: "flex",
        gap: spacing.sm,
        alignItems: "center",
        fontSize: fontSize.sm
      },
      children: [/*#__PURE__*/jsx(ExclamationTriangleIcon, {
        width: iconSize.sm,
        height: iconSize.sm
      }), /*#__PURE__*/jsx("span", {
        children: "Failed to switch network."
      })]
    })]
  });
};
const ConfirmMessage = styled.p`
  font-size: ${fontSize.sm};
  margin: 0;
  color: ${p => p.theme.link.primary};
`;

const SelectPersonalWallet = props => {
  const guestWallet = props.personalWallets.find(w => w.id === walletIds.localWallet);
  const personalWallets = props.personalWallets.filter(w => w.id !== walletIds.localWallet);
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(IconContainer, {
      children: /*#__PURE__*/jsx(Img, {
        src: props.smartWallet.meta.iconURL,
        width: iconSize.xl,
        height: iconSize.xl
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: "Link Personal Wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxs(ModalDescription, {
      children: ["Select a personal wallet to access your account.", " ", /*#__PURE__*/jsxs(HelperLink, {
        md: true,
        href: "https://portal.thirdweb.com/wallet/smart-wallet",
        target: "_blank",
        style: {
          display: "inline",
          whiteSpace: "nowrap"
        },
        children: [" ", "Learn More", " "]
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsx(WalletSelection, {
      configuredWallets: personalWallets,
      selectWallet: props.selectWallet
    }), guestWallet && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsx(Flex, {
        justifyContent: "center",
        children: /*#__PURE__*/jsx(Button, {
          variant: "link",
          onClick: () => {
            props.selectWallet(guestWallet);
          },
          children: "Continue as guest"
        })
      })]
    })]
  });
};
const IconContainer = styled.div`
  margin-top: ${spacing.lg};
`;

const smartWallet = config => {
  const configuredWallet = {
    id: SmartWallet.id,
    meta: SmartWallet.meta,
    create: options => new SmartWallet({
      ...options,
      ...config
    }),
    connectUI(props) {
      return /*#__PURE__*/jsx(SmartConnectUI, {
        ...props,
        configuredWallet: configuredWallet
      });
    },
    isInstalled() {
      return false;
    },
    config: {
      ...config,
      personalWallets: config?.personalWallets || defaultWallets
    }
  };
  return configuredWallet;
};
const SmartConnectUI = props => {
  const activeWallet = useWallet();
  const {
    configuredWallet
  } = props;
  const [personalConfiguredWallet, setPersonalConfiguredWallet] = useState();
  if (personalConfiguredWallet) {
    const _props = {
      close: () => {
        setPersonalConfiguredWallet(undefined);
        props.close(false); // do not reset UI
      },

      goBack: () => {
        setPersonalConfiguredWallet(undefined);
      },
      isOpen: props.isOpen,
      open: props.open
    };
    if (personalConfiguredWallet.connectUI) {
      return /*#__PURE__*/jsx(personalConfiguredWallet.connectUI, {
        ..._props
      });
    }
    return /*#__PURE__*/jsx(HeadlessConnectUI, {
      ..._props,
      configuredWallet: personalConfiguredWallet
    });
  }
  if (!activeWallet) {
    return /*#__PURE__*/jsx(SelectPersonalWallet, {
      personalWallets: configuredWallet.config.personalWallets,
      onBack: props.goBack,
      smartWallet: configuredWallet,
      selectWallet: setPersonalConfiguredWallet
    });
  }
  return /*#__PURE__*/jsx(SmartWalletConnecting, {
    onBack: props.goBack,
    onConnect: props.close,
    smartWallet: configuredWallet
  });
};

export { localWallet, smartWallet };
