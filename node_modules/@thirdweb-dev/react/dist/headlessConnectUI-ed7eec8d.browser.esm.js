import { L as Label, S as Spacer, e as Input, E as ErrorMessage, g as InputContainer, h as InputButton, s as spacing, m as media, a as ModalDescription, B as BackButton, I as Img, i as iconSize, M as ModalTitle, d as Spinner, H as HelperLink, r as radius, j as shadow, c as Flex, f as fontSize, b as Button } from './basic-ea9327c2.browser.esm.js';
import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { CoinbaseWallet, assertWindowEthereum, MetaMaskWallet, WalletConnectV1, walletIds } from '@thirdweb-dev/wallets';
import { useCreateWalletInstance, useThirdwebWallet, useConnect, useWallets, useWallet } from '@thirdweb-dev/react-core';
import { detect } from 'detect-browser';
import styled from '@emotion/styled';
import { useState, useEffect, useRef } from 'react';
import { keyframes } from '@emotion/react';
import ReactQrCode from 'react-qr-code';

const FormFieldWithIconButton = props => {
  return /*#__PURE__*/jsxs("div", {
    children: [/*#__PURE__*/jsx(Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxs(InputContainer, {
      "data-error": !!props.error,
      children: [/*#__PURE__*/jsx(Input, {
        variant: "transparent",
        required: props.required,
        name: props.name,
        autoComplete: props.autocomplete,
        id: props.id,
        onChange: e => props.onChange(e.target.value),
        value: props.value,
        type: props.noSave ? "text" : props.type,
        style: props.type === "password" && props.noSave ? {
          WebkitTextSecurity: "disc"
        } : undefined
      }), /*#__PURE__*/jsx(InputButton, {
        type: "button",
        onClick: props.right.onClick,
        children: props.right.icon
      })]
    }), props.error && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "sm"
      }), /*#__PURE__*/jsxs(ErrorMessage, {
        children: [" ", props.error, " "]
      })]
    })]
  });
};
const FormField = props => {
  return /*#__PURE__*/jsxs("div", {
    children: [/*#__PURE__*/jsx(Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsx(Input, {
      variant: "outline",
      required: props.required,
      name: props.name,
      autoComplete: props.autocomplete,
      id: props.id,
      onChange: e => props.onChange(e.target.value),
      value: props.value,
      type: props.type,
      "data-error": !!props.errorMessage,
      placeholder: props.placeholder,
      disabled: props.disabled
    }), props.errorMessage && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsx(ErrorMessage, {
        children: props.errorMessage
      })]
    })]
  });
};

function detectEnv(userAgent) {
  return detect(userAgent);
}

/**
 * @internal
 */
function isAndroid() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("android") : false;
}

/**
 * @internal
 */
function isIOS() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}

/**
 * @internal
 */
function detectOS() {
  const env = detectEnv();
  return env?.os ? env.os : undefined;
}

/**
 * @internal
 */
function isMobile() {
  const os = detectOS();
  return os ? isAndroid() || isIOS() : false;
}

const ConnectingScreen = props => {
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(IconContainer, {
      children: /*#__PURE__*/jsx(Img, {
        src: props.walletIconURL,
        width: iconSize.xl,
        height: iconSize.xl
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs(TitleContainer, {
      children: [/*#__PURE__*/jsx(ModalTitle, {
        children: "Connecting your wallet"
      }), /*#__PURE__*/jsx(Spinner, {
        size: "md",
        color: "link"
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxs(Desc, {
      centerOnMobile: true,
      children: ["Connect your wallet through the ", props.walletName, " ", isMobile() ? "application" : "pop-up"]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxs(HelperLink, {
      target: "_blank",
      href: props.supportLink,
      children: ["Having troubles connecting to ", props.walletName, "?"]
    })]
  });
};
const TitleContainer = styled.div`
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  ${media.mobile} {
    flex-direction: column;
    align-items: center;
    gap: ${spacing.xl};
  }
`;
const IconContainer = styled.div`
  display: flex;
  margin-top: ${spacing.lg};
  ${media.mobile} {
    justify-content: center;
    margin-top: 0;
  }
`;
const Desc = styled(ModalDescription)`
  ${media.mobile} {
    padding: 0 ${spacing.lg};
  }
`;

const fadeInAnimation = keyframes`
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;
const FadeIn = styled.div`
  animation: ${fadeInAnimation} 0.15s ease-in;
`;

const Skeleton = props => {
  return /*#__PURE__*/jsx(SkeletonDiv, {
    gradient: props.gradient,
    style: {
      height: props.height,
      width: props.width || "auto"
    }
  });
};
const skeletonAnimation = keyframes`
0% {
    background-color: var(--skeleton-c-1);
  }
  100% {
    background-color: var(--skeleton-c-2);
  }
`;
const SkeletonDiv = styled.div`
  background-size: 200% 200%;
  --skeleton-c-1: ${p => p.theme.bg[p.gradient?.c1 || "elevated"]};
  --skeleton-c-2: ${p => p.theme.bg[p.gradient?.c2 || "highlighted"]};
  animation: ${skeletonAnimation} 500ms ease-in-out infinite alternate;
  border-radius: ${radius.sm};
`;

const QRCode = props => {
  return /*#__PURE__*/jsxs("div", {
    style: {
      position: "relative",
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    },
    children: [props.qrCodeUri ? /*#__PURE__*/jsx(FadeIn, {
      children: /*#__PURE__*/jsx(QRCodeContainer, {
        children: /*#__PURE__*/jsx(StyledReactQrCode, {
          value: props.qrCodeUri
        })
      })
    }) : /*#__PURE__*/jsx(QRSkeleton, {
      height: "200px",
      width: "200px"
    }), props.QRIcon && /*#__PURE__*/jsx(QrCodeIconContainer, {
      children: props.QRIcon
    })]
  });
};
const QrCodeIconContainer = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: ${radius.md};
  display: flex;
  justify-content: center;
  align-content: center;
  padding: 4px;
`;
const QRCodeContainer = styled.div`
  background: white;
  padding: ${spacing.xxs};
  display: flex;
  justify-content: center;
  align-content: center;
  border-radius: ${radius.md};
  box-shadow: ${shadow.md};
`;
const StyledReactQrCode = styled(ReactQrCode)`
  width: 200px;
  height: 200px;
  border-radius: ${radius.md};

  ${media.mobile} {
    width: 150px;
    height: 150px;
  }
`;
const QRSkeleton = styled(Skeleton)`
  width: 200px;
  height: 200px;
  border-radius: ${radius.md};
  ${media.mobile} {
    width: 150px;
    height: 150px;
  }
`;

const Apple = "ipfs://Qmcyb1akWqyu8W4DgVWzZUozrCkfES8ow36jNhjs7arwvc/AppleGray.svg";
const Chrome = "ipfs://QmPu4UKsektZixeZN4ixi8Ji9KbMuwcRKAp3JRK4jrcaMK/Chrome.svg";
const GooglePlay = "ipfs://QmTSu87iXWpfcCgy15DX3Mgp1Rqb8zFAwXdbLNh6WxmpC4/GooglePlay.svg";

const GetStartedScreen = props => {
  const [showScreen, setShowScreen] = useState("base");
  const isScanScreen = showScreen === "android-scan" || showScreen === "ios-scan";
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      style: isScanScreen ? {
        position: "absolute",
        top: spacing.lg,
        left: spacing.lg
      } : undefined,
      onClick: () => {
        if (showScreen === "base") {
          props.onBack();
        } else {
          setShowScreen("base");
        }
      }
    }), showScreen === "android-scan" && props.googlePlayStoreLink && /*#__PURE__*/jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsx(Img, {
        src: GooglePlay,
        width: iconSize.md,
        height: iconSize.md
      }),
      url: props.googlePlayStoreLink,
      platform: "Google Play",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "ios-scan" && props.appleStoreLink && /*#__PURE__*/jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsx(Img, {
        width: iconSize.md,
        height: iconSize.md,
        src: Apple
      }),
      url: props.appleStoreLink,
      platform: "App Store",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "base" && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), props.header || /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx(Img, {
          src: props.walletIconURL,
          width: iconSize.xl,
          height: iconSize.xl,
          alt: ""
        }), /*#__PURE__*/jsx(Spacer, {
          y: "lg"
        }), /*#__PURE__*/jsxs(ModalTitle, {
          children: ["Get started with ", props.walletName]
        }), /*#__PURE__*/jsx(Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsx(ModalDescription, {
          children: "Download your preferred option and refresh this page"
        })]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(Flex, {
        flexDirection: "column",
        gap: "xs",
        children: [props.chromeExtensionLink && /*#__PURE__*/jsxs(ButtonLink, {
          onClick: () => {
            window.open(props.chromeExtensionLink, "_blank");
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: Chrome
          }), /*#__PURE__*/jsx("span", {
            children: "Download Chrome Extension"
          })]
        }), props.googlePlayStoreLink && /*#__PURE__*/jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.googlePlayStoreLink, "_blank");
            } else {
              setShowScreen("android-scan");
            }
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: GooglePlay
          }), /*#__PURE__*/jsx("span", {
            children: "Download on Google Play"
          })]
        }), props.appleStoreLink && /*#__PURE__*/jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.appleStoreLink, "_blank");
            } else {
              setShowScreen("ios-scan");
            }
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: Apple
          }), /*#__PURE__*/jsx("span", {
            children: "Download on App Store"
          })]
        })]
      })]
    }), isScanScreen && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(HelperLink, {
        as: "button",
        onClick: props.onBack,
        style: {
          textAlign: "center",
          display: "block",
          width: "100%"
        },
        children: ["I", `'`, "ve finished setting up my ", props.walletName, " on mobile"]
      })]
    }), !isScanScreen && props.footer]
  });
};
const ScanScreen$1 = props => {
  return /*#__PURE__*/jsxs("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      textAlign: "center"
    },
    children: [/*#__PURE__*/jsx(QRCode, {
      qrCodeUri: props.url,
      QRIcon: /*#__PURE__*/jsx(Img, {
        src: props.walletIconURL,
        width: iconSize.lg,
        height: iconSize.lg
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxs("div", {
      style: {
        display: "flex",
        gap: spacing.sm,
        alignItems: "center"
      },
      children: [props.platformIcon, /*#__PURE__*/jsxs(ModalTitle, {
        children: ["Install ", props.walletName, " on ", props.platform]
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs(ModalDescription, {
      children: ["Scan QR with your phone to download ", /*#__PURE__*/jsx("br", {}), " ", props.walletName, " for", " ", props.platform]
    })]
  });
};
const ButtonLink = styled.button`
  all: unset;
  text-decoration: none;
  padding: ${spacing.sm} ${spacing.md};
  border-radius: ${radius.sm};
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
    text-decoration: none;
    color: ${p => p.theme.text.neutral};
  }
`;

const ScanScreen = props => {
  const walletName = props.walletName.toLowerCase().includes("wallet") ? props.walletName : `${props.walletName} wallet`;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack,
      style: {
        position: "absolute",
        zIndex: 10,
        left: spacing.lg,
        top: spacing.lg
      }
    }), /*#__PURE__*/jsxs("div", {
      style: {
        textAlign: "center"
      },
      children: [/*#__PURE__*/jsx(QRCode, {
        qrCodeUri: props.qrCodeUri,
        QRIcon: /*#__PURE__*/jsx(Img, {
          width: iconSize.lg,
          height: iconSize.lg,
          src: props.walletIconURL
        })
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(ModalTitle, {
        style: {
          textAlign: "center"
        },
        children: ["Scan with ", walletName, " "]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "md"
      }), /*#__PURE__*/jsxs(ModalDescription, {
        children: ["Scan this QR code with your phone ", /*#__PURE__*/jsx("br", {}), "camera or ", walletName, " to connect"]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "md"
      }), /*#__PURE__*/jsx("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        },
        children: /*#__PURE__*/jsx(Spinner, {
          size: "md",
          color: "link"
        })
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(LinkButton, {
        onClick: props.onGetStarted,
        children: [`Don't`, " have ", walletName, "?"]
      })]
    })]
  });
};
const LinkButton = styled.button`
  all: unset;
  color: ${p => p.theme.link.primary};
  font-size: ${fontSize.sm};
  cursor: pointer;
  &:hover {
    color: ${p => p.theme.link.primaryHover};
  }
`;

const CoinbaseScan = _ref => {
  let {
    configuredWallet,
    onConnected,
    onGetStarted,
    onBack
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState(undefined);
  const twWalletContext = useThirdwebWallet();
  useEffect(() => {
    (async () => {
      const wallet = createInstance(configuredWallet);
      wallet.getQrUrl().then(uri => {
        setQrCodeUri(uri || undefined);
      });
      wallet.connect({
        chainId: twWalletContext.chainToConnect?.chainId
      }).then(() => {
        twWalletContext.handleWalletConnect(wallet);
        onConnected();
      });
    })();
  }, [createInstance, twWalletContext, onConnected, configuredWallet]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: configuredWallet.meta.name,
    walletIconURL: configuredWallet.meta.iconURL
  });
};

const CoinbaseConnectUI = _ref => {
  let {
    configuredWallet,
    close,
    goBack
  } = _ref;
  const connect = useConnect();
  const {
    meta
  } = configuredWallet;
  const [screen, setScreen] = useState("loading");
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (screen !== "loading") {
      return;
    }
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = configuredWallet.isInstalled ? configuredWallet.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(configuredWallet);
          close();
        } catch (e) {
          goBack();
          console.error(e);
        }
      }

      // if metamask is not injected
      else {
        if (isMobile()) {
          // coinbase will redirect to download page for coinbase wallet apps
          connect(configuredWallet);
        } else {
          setScreen("scanning");
        }
      }
    })();
  }, [screen, configuredWallet, close, connect, goBack]);
  if (screen === "connecting" || screen === "loading") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      onBack: goBack,
      walletName: meta.name,
      walletIconURL: meta.iconURL,
      supportLink: "https://help.coinbase.com/en/wallet/other-topics/troubleshooting-and-tips"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: meta.iconURL,
      walletName: meta.name,
      chromeExtensionLink: meta.urls?.chrome,
      googlePlayStoreLink: meta.urls?.android,
      appleStoreLink: meta.urls?.ios,
      onBack: goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(CoinbaseScan, {
      onBack: goBack,
      onConnected: close,
      onGetStarted: () => setScreen("get-started"),
      configuredWallet: configuredWallet
    });
  }
  return null;
};

const coinbaseWallet = () => {
  const configuredWallet = {
    id: CoinbaseWallet.id,
    meta: {
      name: "Coinbase Wallet",
      iconURL: "ipfs://QmcJBHopbwfJcLqJpX2xEufSS84aLbF7bHavYhaXUcrLaH/coinbase.svg",
      urls: {
        chrome: "https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad",
        android: "https://play.google.com/store/apps/details?id=org.toshi",
        ios: "https://apps.apple.com/us/app/coinbase-wallet-nfts-crypto/id1278383455"
      }
    },
    create(options) {
      return new CoinbaseWallet({
        ...options,
        headlessMode: true
      });
    },
    connectUI(props) {
      return /*#__PURE__*/jsx(CoinbaseConnectUI, {
        ...props,
        configuredWallet: configuredWallet
      });
    },
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum?.isCoinbaseWallet || globalThis.window.ethereum?.providers?.some(p => p.isCoinbaseWallet) || false;
      }
      return false;
    }
  };
  return configuredWallet;
};

var coinbaseWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  coinbaseWallet: coinbaseWallet
});

const MetamaskScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    configuredWallet
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState();
  const twWalletContext = useThirdwebWallet();
  useEffect(() => {
    const metamask = createInstance(configuredWallet);
    metamask.connectWithQrCode({
      chainId: twWalletContext.chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        twWalletContext.handleWalletConnect(metamask);
        onConnected();
      }
    });
  }, [createInstance, twWalletContext, onConnected, configuredWallet]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: configuredWallet.meta.name,
    walletIconURL: configuredWallet.meta.iconURL
  });
};

const MetamaskConnectUI = props => {
  const [screen, setScreen] = useState("connecting");
  const {
    configuredWallet,
    close
  } = props;
  const connect = useConnect();
  const {
    goBack
  } = props;
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = configuredWallet.isInstalled ? configuredWallet.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(configuredWallet);
          close();
        } catch (e) {
          goBack();
        }
      }

      // if metamask is not injected
      else {
        // on mobile, open metamask app link
        if (isMobile()) {
          window.open(`https://metamask.app.link/dapp/${window.location.toString()}`);
        } else {
          // on desktop, show the metamask scan qr code
          setScreen("scanning");
        }
      }
    })();
  }, [configuredWallet, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      onBack: props.goBack,
      walletName: configuredWallet.meta.name,
      walletIconURL: configuredWallet.meta.iconURL,
      supportLink: "https://support.metamask.io/hc/en-us/articles/4406430256539-User-Guide-Troubleshooting"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: configuredWallet.meta.iconURL,
      walletName: configuredWallet.meta.name,
      chromeExtensionLink: configuredWallet.meta.urls?.chrome,
      googlePlayStoreLink: configuredWallet.meta.urls?.android,
      appleStoreLink: configuredWallet.meta.urls?.ios,
      onBack: props.goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(MetamaskScan, {
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      configuredWallet: configuredWallet
    });
  }
  return null;
};

const metamaskWallet = () => {
  const configuredWallet = {
    id: MetaMaskWallet.id,
    meta: {
      name: "MetaMask",
      iconURL: "ipfs://QmZZHcw7zcXursywnLDAyY6Hfxzqop5GKgwoq8NB9jjrkN/metamask.svg",
      urls: {
        chrome: "https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",
        android: "https://play.google.com/store/apps/details?id=io.metamask",
        ios: "https://apps.apple.com/us/app/metamask-blockchain-wallet/id1438144202"
      }
    },
    create: options => {
      return new MetaMaskWallet({
        ...options,
        qrcode: false
      });
    },
    connectUI(props) {
      return /*#__PURE__*/jsx(MetamaskConnectUI, {
        ...props,
        configuredWallet: configuredWallet
      });
    },
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum.isMetaMask;
      }
      return false;
    }
  };
  return configuredWallet;
};

var metamaskWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  metamaskWallet: metamaskWallet
});

const walletConnectV1 = () => {
  const configuredWallet = {
    id: WalletConnectV1.id,
    meta: {
      name: "WalletConnect",
      iconURL: "ipfs://QmX58KPRaTC9JYZ7KriuBzeoEaV2P9eZcA3qbFnTHZazKw/wallet-connect.svg"
    },
    create: options => new WalletConnectV1({
      ...options,
      qrcode: true
    })
  };
  return configuredWallet;
};

var walletConnectV1$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  walletConnectV1: walletConnectV1
});

const defaultWallets = [metamaskWallet(), coinbaseWallet(), walletConnectV1()];

// TODO :may be this is not needed anymore - only used in a few places

function useConfiguredWallet(id, required) {
  const wallets = useWallets();
  const found = wallets.find(w => w.id === id);
  if (required && !found) {
    throw new Error(`Wallet ${id} not found`);
  }
  return found;
}

const WalletSelector = props => {
  const localWalletInfo = useConfiguredWallet("localWallet", false);
  const configuredWallets = props.configuredWallets.filter(w => w.id !== walletIds.localWallet);
  const showGetStarted = !localWalletInfo && !!props.configuredWallets[0].meta.urls;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(ModalTitle, {
      children: "Choose your wallet"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsx(WalletSelection, {
      configuredWallets: configuredWallets,
      selectWallet: props.selectWallet
    }), localWalletInfo && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsx(Flex, {
        justifyContent: "center",
        children: /*#__PURE__*/jsx(Button, {
          variant: "link",
          onClick: () => {
            props.selectWallet(localWalletInfo);
          },
          children: "Continue as guest"
        })
      })]
    }), showGetStarted && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsx(HelperLink, {
        as: "button",
        onClick: props.onGetStarted,
        style: {
          display: "block",
          width: "100%",
          textAlign: "center"
        },
        children: "Need help getting started?"
      })]
    })]
  });
};
const WalletSelection = props => {
  // show the installed wallets first
  const configuredWallets = props.configuredWallets.sort((a, b) => {
    const aInstalled = a.isInstalled ? a.isInstalled() : false;
    const bInstalled = b.isInstalled ? b.isInstalled() : false;
    if (aInstalled && !bInstalled) {
      return -1;
    }
    if (!aInstalled && bInstalled) {
      return 1;
    }
    return 0;
  });
  return /*#__PURE__*/jsx(WalletList, {
    children: configuredWallets.map(configuredWallet => {
      const isInstalled = configuredWallet.isInstalled ? configuredWallet.isInstalled() : false;
      return /*#__PURE__*/jsx("li", {
        children: /*#__PURE__*/jsxs(WalletButton, {
          type: "button",
          onClick: () => {
            props.selectWallet(configuredWallet);
          },
          children: [/*#__PURE__*/jsx(Img, {
            src: configuredWallet.meta.iconURL,
            width: iconSize.lg,
            height: iconSize.lg,
            loading: "eager"
          }), /*#__PURE__*/jsx(WalletName, {
            children: configuredWallet.meta.name
          }), isInstalled && /*#__PURE__*/jsx(InstallBadge, {
            children: " Installed "
          })]
        })
      }, configuredWallet.id);
    })
  });
};
const WalletList = styled.ul`
  all: unset;
  list-style-type: none;
  display: flex;
  flex-direction: column;
  gap: ${spacing.xs};
  box-sizing: border-box;
`;
const WalletButton = styled.button`
  all: unset;
  padding: ${spacing.sm} ${spacing.md};
  border-radius: ${radius.sm};
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
  }
`;
const InstallBadge = styled.span`
  padding: ${spacing.xxs} ${spacing.xs};
  font-size: ${fontSize.xs};
  background-color: ${p => p.theme.badge.secondary};
  border-radius: ${radius.lg};
  margin-left: auto;
`;
const WalletName = styled.span`
  font-size: ${fontSize.md};
  font-weight: 500;
`;

/**
 *
 * @returns `true` if the wallet does not have a UI and can sign transactions without user interaction.
 */
function useIsHeadlessWallet() {
  const activeWallet = useWallet();
  if (!activeWallet) {
    return false;
  }
  const id = activeWallet.walletId;
  return id === walletIds.localWallet || id === walletIds.paper || id === walletIds.magicLink;
}

const HeadlessConnectUI = _ref => {
  let {
    close,
    configuredWallet,
    open
  } = _ref;
  const connect = useConnect();
  const prompted = useRef(false);
  useEffect(() => {
    if (prompted.current) {
      return;
    }
    prompted.current = true;
    (async () => {
      close();
      try {
        await connect(configuredWallet);
      } catch (e) {
        open();
        console.error(e);
      }
    })();
  }, [configuredWallet, connect, close, open]);
  return null;
};

export { FormFieldWithIconButton as F, GetStartedScreen as G, HeadlessConnectUI as H, Skeleton as S, WalletSelection as W, useConfiguredWallet as a, FormField as b, coinbaseWallet as c, defaultWallets as d, WalletSelector as e, fadeInAnimation as f, coinbaseWallet$1 as g, metamaskWallet$1 as h, isMobile as i, walletConnectV1$1 as j, metamaskWallet as m, useIsHeadlessWallet as u, walletConnectV1 as w };
