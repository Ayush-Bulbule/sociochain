import { MagicLink } from '@thirdweb-dev/wallets';
import styled from '@emotion/styled';
import { ChatBubbleIcon, EnvelopeClosedIcon } from '@radix-ui/react-icons';
import { useState } from 'react';
import { useCreateWalletInstance, useThirdwebWallet } from '@thirdweb-dev/react-core';
import { B as BackButton, S as Spacer, I as Img, i as iconSize, M as ModalTitle, e as Input, E as ErrorMessage, F as FormFooter, b as Button, s as spacing, d as Spinner, a as ModalDescription, c as Flex } from './basic-ea9327c2.browser.esm.js';
import { jsxs, Fragment, jsx } from 'react/jsx-runtime';
import '@emotion/react';
import '@radix-ui/react-dialog';
import '@radix-ui/colors';

const EmailConnect = props => {
  const [isConnecting, setIsConnecting] = useState(false);
  const createInstance = useCreateWalletInstance();
  const twContext = useThirdwebWallet();
  const [email, setEmail] = useState("");
  const [isValidEmail, setIsValidEmail] = useState(false);
  const handleConnect = async () => {
    const magicWallet = createInstance(props.magicLinkWallet);
    setIsConnecting(true);
    props.close();
    const connectOptions = {
      chainId: twContext.activeChain?.chainId,
      email
    };
    try {
      twContext.setConnectionStatus("connecting");
      await magicWallet.connect(connectOptions);
      setIsConnecting(false);
      twContext.handleWalletConnect(magicWallet, connectOptions);
      props.onConnect();
    } catch (e) {
      console.error(e);
      setIsConnecting(false);
      twContext.setConnectionStatus("disconnected");
      props.open();
    }
  };
  const error = email && !isValidEmail;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(Img, {
      src: props.magicLinkWallet.meta.iconURL,
      width: iconSize.xl,
      height: iconSize.xl
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: " Login with email "
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleConnect();
      },
      children: [/*#__PURE__*/jsx(Input, {
        type: "email",
        id: "email",
        name: "email",
        variant: "outline",
        placeholder: "johndoe@gmail.com",
        required: true,
        value: email,
        onChange: e => {
          setEmail(e.target.value);
          // check if a valid phone number using browser api
          setIsValidEmail(e.target.validity.valid);
        },
        "data-error": error
      }), /*#__PURE__*/jsxs("div", {
        style: {
          visibility: error ? "visible" : "hidden"
        },
        children: [/*#__PURE__*/jsx(Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsx(ErrorMessage, {
          children: "Invalid Email "
        })]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsx(FormFooter, {
        children: /*#__PURE__*/jsxs(Button, {
          variant: "inverted",
          style: {
            gap: spacing.sm
          },
          children: [isConnecting ? "Signing in" : "Sign in", isConnecting && /*#__PURE__*/jsx(Spinner, {
            color: "inverted",
            size: "sm"
          })]
        })
      })]
    })]
  });
};

const SMSConnect = props => {
  const [isConnecting, setIsConnecting] = useState(false);
  const createInstance = useCreateWalletInstance();
  const twContext = useThirdwebWallet();
  const [phoneNumber, setPhoneNumber] = useState("");
  const [isValidPhoneNumber, setIsValidPhoneNumber] = useState(false);
  const handleSmsConnect = async () => {
    const magicWallet = createInstance(props.magicLinkWallet);
    setIsConnecting(true);
    props.close();
    const connectOptions = {
      chainId: twContext.activeChain?.chainId,
      phoneNumber
    };
    try {
      twContext.setConnectionStatus("connecting");
      await magicWallet.connect(connectOptions);
      setIsConnecting(false);
      twContext.handleWalletConnect(magicWallet, connectOptions);
      props.onConnect();
    } catch (e) {
      console.error(e);
      setIsConnecting(false);
      twContext.setConnectionStatus("disconnected");
      props.open();
    }
  };
  const error = phoneNumber && !isValidPhoneNumber;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(Img, {
      src: props.magicLinkWallet.meta.iconURL,
      width: iconSize.xl,
      height: iconSize.xl
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: " Login with phone number "
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsx(ModalDescription, {
      children: "Enter your phone number including country code"
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleSmsConnect();
      },
      children: [/*#__PURE__*/jsx(Input, {
        type: "tel",
        id: "phone",
        name: "phone",
        variant: "outline",
        placeholder: "+1234567890",
        required: true,
        value: phoneNumber,
        pattern: "\\+[0-9]{1}[0-9]+",
        onChange: e => {
          setPhoneNumber(e.target.value);
          // check if a valid phone number using browser api
          setIsValidPhoneNumber(e.target.validity.valid);
        },
        "data-error": error
      }), /*#__PURE__*/jsxs("div", {
        style: {
          visibility: error ? "visible" : "hidden"
        },
        children: [/*#__PURE__*/jsx(Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsx(ErrorMessage, {
          children: !phoneNumber.startsWith("+") ? "Phone number must start with +" : "Invalid phone number"
        })]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsx(FormFooter, {
        children: /*#__PURE__*/jsxs(Button, {
          variant: "inverted",
          style: {
            gap: spacing.sm
          },
          children: [isConnecting ? "Connecting" : "Connect", isConnecting && /*#__PURE__*/jsx(Spinner, {
            color: "inverted",
            size: "sm"
          })]
        })
      })]
    })]
  });
};

const MagicConnectUI = props => {
  const isSmsEnabled = props.magicWallet.config.smsLogin !== false;
  const isEmailEnabled = props.magicWallet.config.emailLogin !== false;
  let firstScreen = "menu";
  if (isEmailEnabled && !isSmsEnabled) {
    firstScreen = "email";
  } else if (isSmsEnabled && !isEmailEnabled) {
    firstScreen = "sms";
  }

  // const createInstance = useCreateWalletInstance();
  // const twContext = useThirdwebWallet();
  // const [isConnecting, setIsConnecting] = useState(false);
  const [showUI, setShowUI] = useState(firstScreen);

  // const handleAuthConnect = async (oauthProvider: MagicOAuthProvider) => {
  //   const magicWallet = createInstance(magicLinkObj) as MagicLink;
  //   setIsConnecting(true);
  //   await magicWallet.connect({
  //     oauthProvider: oauthProvider,
  //   });
  //   setIsConnecting(false);
  //   twContext.handleWalletConnect(magicWallet);
  //   props.onConnect();
  // };

  if (showUI === "sms") {
    return /*#__PURE__*/jsx(SMSConnect, {
      close: props.close,
      open: props.open,
      magicLinkWallet: props.magicWallet,
      onBack: () => {
        if (firstScreen === "sms") {
          props.goBack();
        } else {
          setShowUI(firstScreen);
        }
      },
      onConnect: props.close
    });
  }
  if (showUI === "email") {
    return /*#__PURE__*/jsx(EmailConnect, {
      close: props.close,
      open: props.open,
      magicLinkWallet: props.magicWallet,
      onBack: () => {
        if (firstScreen === "email") {
          props.goBack();
        } else {
          setShowUI(firstScreen);
        }
      },
      onConnect: props.close
    });
  }

  // if (isConnecting) {
  //   return (
  //     <Flex
  //       justifyContent="center"
  //       alignItems="center"
  //       style={{
  //         height: "350px",
  //       }}
  //     >
  //       <Spinner color="primary" size="lg" />
  //     </Flex>
  //   );
  // }

  // const authButton = (oauthProvider: MagicOAuthProvider) => (
  //   <IconButton
  //     variant="secondary"
  //     onClick={() => handleAuthConnect(oauthProvider)}
  //     aria-label={oauthProvider}
  //   >
  //     <Img
  //       src={authProviderImages[oauthProvider]}
  //       width={iconSize.lg}
  //       height={iconSize.lg}
  //     />
  //   </IconButton>
  // );

  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.goBack
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(Img, {
      src: props.magicWallet.meta.iconURL,
      width: iconSize.xl,
      height: iconSize.xl
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsx(ModalTitle, {
      children: " Magic Link "
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxs(ModalDescription, {
      children: [isSmsEnabled && isEmailEnabled && "Login with your phone number or email", isSmsEnabled && !isEmailEnabled && "Login with your phone number", !isSmsEnabled && isEmailEnabled && "Login with your email"]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxs(Flex, {
      flexDirection: "column",
      gap: "sm",
      children: [isSmsEnabled && /*#__PURE__*/jsxs(LoginButton, {
        variant: "secondary",
        onClick: () => {
          setShowUI("sms");
        },
        children: ["Phone number", /*#__PURE__*/jsx(ChatBubbleIcon, {
          width: iconSize.md,
          height: iconSize.md,
          style: {
            marginLeft: "auto"
          }
        })]
      }), isEmailEnabled && /*#__PURE__*/jsxs(LoginButton, {
        variant: "secondary",
        onClick: () => {
          setShowUI("email");
        },
        children: ["Email", /*#__PURE__*/jsx(EnvelopeClosedIcon, {
          width: iconSize.md,
          height: iconSize.md,
          style: {
            marginLeft: "auto"
          }
        })]
      }), !isEmailEnabled && !isSmsEnabled && /*#__PURE__*/jsx(ErrorMessage, {
        children: " No login methods enabled "
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    })]
  });
};
const LoginButton = styled(Button)`
  width: 100%;
  gap: ${spacing.md};
  justify-content: left;
  &:hover {
    background-color: ${p => p.theme.bg.elevatedHover};
  }
`;

// const authProviderImages: Record<MagicOAuthProvider, string> = {
//   google: "ipfs://QmNMm6313vpMxbyTcXyZMSEVMkpTvkmJXaqCyFrM5TDQpV/google.svg",
//   twitter: "ipfs://QmbUePooAWJbY1ZbzamAb36WJkuNCDzKxuFh4ZUbrepLud/twitter.svg",
//   apple: "",
//   bitbucket: "",
//   discord: "",
//   facebook: "",
//   github:
//     "ipfs://QmVN2Jaz4XGpEdqo9Ki16TJmxxhiiXDaG4kP18uXpGrJQA/github-gray.svg",
//   gitlab: "",
//   linkedin: "",
//   microsoft:
//     "ipfs://QmX4Nk5VW4tJVFstnEgXvZBdx5uVDz3Si662nhVNpWUFai/microsoft.svg",
//   twitch: "",
// };

const magicLink = config => {
  const configuredWallet = {
    id: MagicLink.id,
    meta: MagicLink.meta,
    create: options => new MagicLink({
      ...options,
      ...config
    }),
    config,
    connectUI(props) {
      return /*#__PURE__*/jsx(MagicConnectUI, {
        ...props,
        magicWallet: configuredWallet
      });
    },
    isInstalled() {
      return false;
    }
  };
  return configuredWallet;
};

export { magicLink };
